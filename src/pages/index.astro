---
import Layout from '../layouts/BaseLayout.astro';
import ProjectCard from '../components/ProjectCard.astro';
import '../styles/global.css';

const projects = [
	{ title: 'Software Updater', description: 'A lightweight tool that automatically checks for and installs updates for desktop applications with minimal user interaction.', image: '/images/project1.png', github: 'https://github.com/cyclonicalperson/software-updater' },
	{ title: 'Microsoft Document Translator', description: 'A GUI utility that translates DOCX files in bulk using Microsoft Azure Translation API.', image: '/images/project2.png', github: 'https://github.com/cyclonicalperson/microsoft-document-translator' },
	{ title: '2048 Game', description: 'A clean, desktop version of the classic 2048 game featuring animations and intuitive controls.', image: '/images/project3.png', github: 'https://github.com/cyclonicalperson/2048-game' },
	{ title: 'Encoder-Decoder', description: 'An educational tool to encode and decode messages using custom ciphers. Great for experimenting with cryptography.', image: '/images/project4.png', github: 'https://github.com/cyclonicalperson/custom-cipher-encrypter-decypter' },
];
---

<Layout title="Pavle Arsenijević – Portfolio">
	<!-- Modal -->
	<div class="modal">
		<img src="" alt="Fullscreen project image" aria-label="Fullscreen view of project image" />
	</div>

	<!-- Landing Page -->
	<header class="landing-page">
		<div class="landing-content">
			<div class="landing-text">
				<h1 class="drawn-heading">
					<span class="drawn-text">Welcome.</span>
				</h1>
				<p>
					My name is Pavle Arsenijević, a Computer Science student based in Kragujevac, Serbia.
					I make productivity-focused desktop applications with clean interfaces and seamless user experiences.
					My work spans from small utilities to fully featured apps — all crafted with precision and purpose.
				</p>
			</div>
			<div class="landing-image">
				<img src="/images/cs-illustration.png" alt="CS Illustration">
			</div>
		</div>
	</header>

	<!-- Projects Section -->
	<section class="projects-section">
		<div class="projects-content">
			<h2>My Work</h2>
			<p>A collection of projects I've made.</p>
			<div class="projects-grid">
				{projects.map(project => (
					<ProjectCard project={project} />
				))}
			</div>
		</div>
	</section>

	<!-- Contact Section -->
	<section class="contact-section">
		<h3>Contact Me</h3>
		<div class="contact-wrapper">
			<form action="https://formspree.io/f/xovdalgg" method="POST">
				<label>
					<input type="text" name="name" placeholder="Your Name" required />
				</label>
				<label>
					<input type="email" name="email" placeholder="Your Email" required />
				</label>
				<label>
					<textarea name="message" placeholder="Your Message" required></textarea>
				</label>
				<button type="submit">Send Message</button>
			</form>
		</div>
		<p>Email: <a href="mailto:cyclonicalperson@gmail.com">cyclonicalperson@gmail.com</a></p>
		<p>Find me on <a href="https://github.com/cyclonicalperson">GitHub</a> |
			<a href="https://www.linkedin.com/in/pavlearsenijevic">LinkedIn</a></p>
	</section>

	<footer class="copyright-footer">
		<p>© 2025 Pavle Arsenijević</p>
	</footer>

	<script is:inline>
		console.log('index.astro: Script initializing at', new Date().toISOString());
		setTimeout(() => {
			console.log('index.astro: Running after 1000ms delay');
			const images = document.querySelectorAll('.project-image');
			const containers = document.querySelectorAll('.image-container');
			const modal = document.querySelector('.modal');
			const modalImg = modal ? modal.querySelector('img') : null;

			console.log(`index.astro: Found ${containers.length} .image-container elements`);
			console.log(`index.astro: Found ${images.length} .project-image elements`);
			console.log(`index.astro: Modal element:`, modal);

			// Modal functionality
			if (modal && modalImg) {
				images.forEach((img, index) => {
					img.style.cursor = 'pointer';
					img.addEventListener('click', () => {
						console.log(`index.astro: Opening modal for image #${index + 1}: ${img.src}`);
						modalImg.src = img.src;
						modalImg.alt = img.alt;
						modal.style.display = 'flex';
					});
				});
				modal.addEventListener('click', () => {
					console.log('index.astro: Closing modal');
					modal.style.display = 'none';
				});
			} else {
				console.warn('index.astro: Modal or modalImg not found');
			}

			// Animation trigger
			if (containers.length > 0) {
				const observer = new IntersectionObserver(
					(entries) => {
						entries.forEach((entry, index) => {
							if (entry.isIntersecting) {
								console.log(`index.astro: .image-container #${index + 1} is visible at`, new Date().toISOString());
								setTimeout(() => {
									entry.target.classList.add('visible');
									console.log(`index.astro: Added .visible to .image-container #${index + 1}`);
								}, index * 200);
								observer.unobserve(entry.target);
							}
						});
					},
					{ threshold: 0.5, rootMargin: '150px' }
				);
				containers.forEach((container, index) => {
					console.log(`index.astro: Observing .image-container #${index + 1}`);
					observer.observe(container);
				});
			} else {
				console.error('index.astro: No .image-container elements found');
			}
		}, 1000);
	</script>
</Layout>